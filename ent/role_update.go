// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liukeshao/echo-admin/ent/predicate"
	"github.com/liukeshao/echo-admin/ent/role"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDeleteTime sets the "delete_time" field.
func (ru *RoleUpdate) SetDeleteTime(i int64) *RoleUpdate {
	ru.mutation.ResetDeleteTime()
	ru.mutation.SetDeleteTime(i)
	return ru
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDeleteTime(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetDeleteTime(*i)
	}
	return ru
}

// AddDeleteTime adds i to the "delete_time" field.
func (ru *RoleUpdate) AddDeleteTime(i int64) *RoleUpdate {
	ru.mutation.AddDeleteTime(i)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RoleUpdate) SetUpdateTime(t time.Time) *RoleUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetDisplayName sets the "display_name" field.
func (ru *RoleUpdate) SetDisplayName(s string) *RoleUpdate {
	ru.mutation.SetDisplayName(s)
	return ru
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDisplayName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetDisplayName(*s)
	}
	return ru
}

// ClearDisplayName clears the value of the "display_name" field.
func (ru *RoleUpdate) ClearDisplayName() *RoleUpdate {
	ru.mutation.ClearDisplayName()
	return ru
}

// SetRemark sets the "remark" field.
func (ru *RoleUpdate) SetRemark(s string) *RoleUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableRemark(s *string) *RoleUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// ClearRemark clears the value of the "remark" field.
func (ru *RoleUpdate) ClearRemark() *RoleUpdate {
	ru.mutation.ClearRemark()
	return ru
}

// SetDeletedTime sets the "deleted_time" field.
func (ru *RoleUpdate) SetDeletedTime(i int64) *RoleUpdate {
	ru.mutation.ResetDeletedTime()
	ru.mutation.SetDeletedTime(i)
	return ru
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDeletedTime(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetDeletedTime(*i)
	}
	return ru
}

// AddDeletedTime adds i to the "deleted_time" field.
func (ru *RoleUpdate) AddDeletedTime(i int64) *RoleUpdate {
	ru.mutation.AddDeletedTime(i)
	return ru
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoleUpdate) defaults() error {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		if role.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized role.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := role.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.DeleteTime(); ok {
		_spec.SetField(role.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedDeleteTime(); ok {
		_spec.AddField(role.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(role.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.DisplayName(); ok {
		_spec.SetField(role.FieldDisplayName, field.TypeString, value)
	}
	if ru.mutation.DisplayNameCleared() {
		_spec.ClearField(role.FieldDisplayName, field.TypeString)
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if ru.mutation.RemarkCleared() {
		_spec.ClearField(role.FieldRemark, field.TypeString)
	}
	if value, ok := ru.mutation.DeletedTime(); ok {
		_spec.SetField(role.FieldDeletedTime, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedDeletedTime(); ok {
		_spec.AddField(role.FieldDeletedTime, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetDeleteTime sets the "delete_time" field.
func (ruo *RoleUpdateOne) SetDeleteTime(i int64) *RoleUpdateOne {
	ruo.mutation.ResetDeleteTime()
	ruo.mutation.SetDeleteTime(i)
	return ruo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDeleteTime(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetDeleteTime(*i)
	}
	return ruo
}

// AddDeleteTime adds i to the "delete_time" field.
func (ruo *RoleUpdateOne) AddDeleteTime(i int64) *RoleUpdateOne {
	ruo.mutation.AddDeleteTime(i)
	return ruo
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RoleUpdateOne) SetUpdateTime(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetDisplayName sets the "display_name" field.
func (ruo *RoleUpdateOne) SetDisplayName(s string) *RoleUpdateOne {
	ruo.mutation.SetDisplayName(s)
	return ruo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDisplayName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetDisplayName(*s)
	}
	return ruo
}

// ClearDisplayName clears the value of the "display_name" field.
func (ruo *RoleUpdateOne) ClearDisplayName() *RoleUpdateOne {
	ruo.mutation.ClearDisplayName()
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *RoleUpdateOne) SetRemark(s string) *RoleUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableRemark(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// ClearRemark clears the value of the "remark" field.
func (ruo *RoleUpdateOne) ClearRemark() *RoleUpdateOne {
	ruo.mutation.ClearRemark()
	return ruo
}

// SetDeletedTime sets the "deleted_time" field.
func (ruo *RoleUpdateOne) SetDeletedTime(i int64) *RoleUpdateOne {
	ruo.mutation.ResetDeletedTime()
	ruo.mutation.SetDeletedTime(i)
	return ruo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDeletedTime(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetDeletedTime(*i)
	}
	return ruo
}

// AddDeletedTime adds i to the "deleted_time" field.
func (ruo *RoleUpdateOne) AddDeletedTime(i int64) *RoleUpdateOne {
	ruo.mutation.AddDeletedTime(i)
	return ruo
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoleUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		if role.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized role.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := role.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.DeleteTime(); ok {
		_spec.SetField(role.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(role.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(role.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DisplayName(); ok {
		_spec.SetField(role.FieldDisplayName, field.TypeString, value)
	}
	if ruo.mutation.DisplayNameCleared() {
		_spec.ClearField(role.FieldDisplayName, field.TypeString)
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if ruo.mutation.RemarkCleared() {
		_spec.ClearField(role.FieldRemark, field.TypeString)
	}
	if value, ok := ruo.mutation.DeletedTime(); ok {
		_spec.SetField(role.FieldDeletedTime, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedDeletedTime(); ok {
		_spec.AddField(role.FieldDeletedTime, field.TypeInt64, value)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
