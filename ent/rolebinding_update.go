// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liukeshao/echo-admin/ent/predicate"
	"github.com/liukeshao/echo-admin/ent/rolebinding"
)

// RoleBindingUpdate is the builder for updating RoleBinding entities.
type RoleBindingUpdate struct {
	config
	hooks    []Hook
	mutation *RoleBindingMutation
}

// Where appends a list predicates to the RoleBindingUpdate builder.
func (rbu *RoleBindingUpdate) Where(ps ...predicate.RoleBinding) *RoleBindingUpdate {
	rbu.mutation.Where(ps...)
	return rbu
}

// SetDeleteTime sets the "delete_time" field.
func (rbu *RoleBindingUpdate) SetDeleteTime(i int64) *RoleBindingUpdate {
	rbu.mutation.ResetDeleteTime()
	rbu.mutation.SetDeleteTime(i)
	return rbu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (rbu *RoleBindingUpdate) SetNillableDeleteTime(i *int64) *RoleBindingUpdate {
	if i != nil {
		rbu.SetDeleteTime(*i)
	}
	return rbu
}

// AddDeleteTime adds i to the "delete_time" field.
func (rbu *RoleBindingUpdate) AddDeleteTime(i int64) *RoleBindingUpdate {
	rbu.mutation.AddDeleteTime(i)
	return rbu
}

// SetUpdateTime sets the "update_time" field.
func (rbu *RoleBindingUpdate) SetUpdateTime(t time.Time) *RoleBindingUpdate {
	rbu.mutation.SetUpdateTime(t)
	return rbu
}

// SetName sets the "name" field.
func (rbu *RoleBindingUpdate) SetName(s string) *RoleBindingUpdate {
	rbu.mutation.SetName(s)
	return rbu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rbu *RoleBindingUpdate) SetNillableName(s *string) *RoleBindingUpdate {
	if s != nil {
		rbu.SetName(*s)
	}
	return rbu
}

// SetDisplayName sets the "display_name" field.
func (rbu *RoleBindingUpdate) SetDisplayName(s string) *RoleBindingUpdate {
	rbu.mutation.SetDisplayName(s)
	return rbu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (rbu *RoleBindingUpdate) SetNillableDisplayName(s *string) *RoleBindingUpdate {
	if s != nil {
		rbu.SetDisplayName(*s)
	}
	return rbu
}

// ClearDisplayName clears the value of the "display_name" field.
func (rbu *RoleBindingUpdate) ClearDisplayName() *RoleBindingUpdate {
	rbu.mutation.ClearDisplayName()
	return rbu
}

// SetRoleName sets the "role_name" field.
func (rbu *RoleBindingUpdate) SetRoleName(s string) *RoleBindingUpdate {
	rbu.mutation.SetRoleName(s)
	return rbu
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (rbu *RoleBindingUpdate) SetNillableRoleName(s *string) *RoleBindingUpdate {
	if s != nil {
		rbu.SetRoleName(*s)
	}
	return rbu
}

// SetUserID sets the "user_id" field.
func (rbu *RoleBindingUpdate) SetUserID(s string) *RoleBindingUpdate {
	rbu.mutation.SetUserID(s)
	return rbu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rbu *RoleBindingUpdate) SetNillableUserID(s *string) *RoleBindingUpdate {
	if s != nil {
		rbu.SetUserID(*s)
	}
	return rbu
}

// SetDeletedTime sets the "deleted_time" field.
func (rbu *RoleBindingUpdate) SetDeletedTime(i int64) *RoleBindingUpdate {
	rbu.mutation.ResetDeletedTime()
	rbu.mutation.SetDeletedTime(i)
	return rbu
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (rbu *RoleBindingUpdate) SetNillableDeletedTime(i *int64) *RoleBindingUpdate {
	if i != nil {
		rbu.SetDeletedTime(*i)
	}
	return rbu
}

// AddDeletedTime adds i to the "deleted_time" field.
func (rbu *RoleBindingUpdate) AddDeletedTime(i int64) *RoleBindingUpdate {
	rbu.mutation.AddDeletedTime(i)
	return rbu
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (rbu *RoleBindingUpdate) ClearDeletedTime() *RoleBindingUpdate {
	rbu.mutation.ClearDeletedTime()
	return rbu
}

// Mutation returns the RoleBindingMutation object of the builder.
func (rbu *RoleBindingUpdate) Mutation() *RoleBindingMutation {
	return rbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rbu *RoleBindingUpdate) Save(ctx context.Context) (int, error) {
	if err := rbu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rbu.sqlSave, rbu.mutation, rbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rbu *RoleBindingUpdate) SaveX(ctx context.Context) int {
	affected, err := rbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rbu *RoleBindingUpdate) Exec(ctx context.Context) error {
	_, err := rbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbu *RoleBindingUpdate) ExecX(ctx context.Context) {
	if err := rbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rbu *RoleBindingUpdate) defaults() error {
	if _, ok := rbu.mutation.UpdateTime(); !ok {
		if rolebinding.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized rolebinding.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := rolebinding.UpdateDefaultUpdateTime()
		rbu.mutation.SetUpdateTime(v)
	}
	return nil
}

func (rbu *RoleBindingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rolebinding.Table, rolebinding.Columns, sqlgraph.NewFieldSpec(rolebinding.FieldID, field.TypeString))
	if ps := rbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rbu.mutation.DeleteTime(); ok {
		_spec.SetField(rolebinding.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := rbu.mutation.AddedDeleteTime(); ok {
		_spec.AddField(rolebinding.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := rbu.mutation.UpdateTime(); ok {
		_spec.SetField(rolebinding.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := rbu.mutation.Name(); ok {
		_spec.SetField(rolebinding.FieldName, field.TypeString, value)
	}
	if value, ok := rbu.mutation.DisplayName(); ok {
		_spec.SetField(rolebinding.FieldDisplayName, field.TypeString, value)
	}
	if rbu.mutation.DisplayNameCleared() {
		_spec.ClearField(rolebinding.FieldDisplayName, field.TypeString)
	}
	if value, ok := rbu.mutation.RoleName(); ok {
		_spec.SetField(rolebinding.FieldRoleName, field.TypeString, value)
	}
	if value, ok := rbu.mutation.UserID(); ok {
		_spec.SetField(rolebinding.FieldUserID, field.TypeString, value)
	}
	if value, ok := rbu.mutation.DeletedTime(); ok {
		_spec.SetField(rolebinding.FieldDeletedTime, field.TypeInt64, value)
	}
	if value, ok := rbu.mutation.AddedDeletedTime(); ok {
		_spec.AddField(rolebinding.FieldDeletedTime, field.TypeInt64, value)
	}
	if rbu.mutation.DeletedTimeCleared() {
		_spec.ClearField(rolebinding.FieldDeletedTime, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolebinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rbu.mutation.done = true
	return n, nil
}

// RoleBindingUpdateOne is the builder for updating a single RoleBinding entity.
type RoleBindingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleBindingMutation
}

// SetDeleteTime sets the "delete_time" field.
func (rbuo *RoleBindingUpdateOne) SetDeleteTime(i int64) *RoleBindingUpdateOne {
	rbuo.mutation.ResetDeleteTime()
	rbuo.mutation.SetDeleteTime(i)
	return rbuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (rbuo *RoleBindingUpdateOne) SetNillableDeleteTime(i *int64) *RoleBindingUpdateOne {
	if i != nil {
		rbuo.SetDeleteTime(*i)
	}
	return rbuo
}

// AddDeleteTime adds i to the "delete_time" field.
func (rbuo *RoleBindingUpdateOne) AddDeleteTime(i int64) *RoleBindingUpdateOne {
	rbuo.mutation.AddDeleteTime(i)
	return rbuo
}

// SetUpdateTime sets the "update_time" field.
func (rbuo *RoleBindingUpdateOne) SetUpdateTime(t time.Time) *RoleBindingUpdateOne {
	rbuo.mutation.SetUpdateTime(t)
	return rbuo
}

// SetName sets the "name" field.
func (rbuo *RoleBindingUpdateOne) SetName(s string) *RoleBindingUpdateOne {
	rbuo.mutation.SetName(s)
	return rbuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rbuo *RoleBindingUpdateOne) SetNillableName(s *string) *RoleBindingUpdateOne {
	if s != nil {
		rbuo.SetName(*s)
	}
	return rbuo
}

// SetDisplayName sets the "display_name" field.
func (rbuo *RoleBindingUpdateOne) SetDisplayName(s string) *RoleBindingUpdateOne {
	rbuo.mutation.SetDisplayName(s)
	return rbuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (rbuo *RoleBindingUpdateOne) SetNillableDisplayName(s *string) *RoleBindingUpdateOne {
	if s != nil {
		rbuo.SetDisplayName(*s)
	}
	return rbuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (rbuo *RoleBindingUpdateOne) ClearDisplayName() *RoleBindingUpdateOne {
	rbuo.mutation.ClearDisplayName()
	return rbuo
}

// SetRoleName sets the "role_name" field.
func (rbuo *RoleBindingUpdateOne) SetRoleName(s string) *RoleBindingUpdateOne {
	rbuo.mutation.SetRoleName(s)
	return rbuo
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (rbuo *RoleBindingUpdateOne) SetNillableRoleName(s *string) *RoleBindingUpdateOne {
	if s != nil {
		rbuo.SetRoleName(*s)
	}
	return rbuo
}

// SetUserID sets the "user_id" field.
func (rbuo *RoleBindingUpdateOne) SetUserID(s string) *RoleBindingUpdateOne {
	rbuo.mutation.SetUserID(s)
	return rbuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rbuo *RoleBindingUpdateOne) SetNillableUserID(s *string) *RoleBindingUpdateOne {
	if s != nil {
		rbuo.SetUserID(*s)
	}
	return rbuo
}

// SetDeletedTime sets the "deleted_time" field.
func (rbuo *RoleBindingUpdateOne) SetDeletedTime(i int64) *RoleBindingUpdateOne {
	rbuo.mutation.ResetDeletedTime()
	rbuo.mutation.SetDeletedTime(i)
	return rbuo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (rbuo *RoleBindingUpdateOne) SetNillableDeletedTime(i *int64) *RoleBindingUpdateOne {
	if i != nil {
		rbuo.SetDeletedTime(*i)
	}
	return rbuo
}

// AddDeletedTime adds i to the "deleted_time" field.
func (rbuo *RoleBindingUpdateOne) AddDeletedTime(i int64) *RoleBindingUpdateOne {
	rbuo.mutation.AddDeletedTime(i)
	return rbuo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (rbuo *RoleBindingUpdateOne) ClearDeletedTime() *RoleBindingUpdateOne {
	rbuo.mutation.ClearDeletedTime()
	return rbuo
}

// Mutation returns the RoleBindingMutation object of the builder.
func (rbuo *RoleBindingUpdateOne) Mutation() *RoleBindingMutation {
	return rbuo.mutation
}

// Where appends a list predicates to the RoleBindingUpdate builder.
func (rbuo *RoleBindingUpdateOne) Where(ps ...predicate.RoleBinding) *RoleBindingUpdateOne {
	rbuo.mutation.Where(ps...)
	return rbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rbuo *RoleBindingUpdateOne) Select(field string, fields ...string) *RoleBindingUpdateOne {
	rbuo.fields = append([]string{field}, fields...)
	return rbuo
}

// Save executes the query and returns the updated RoleBinding entity.
func (rbuo *RoleBindingUpdateOne) Save(ctx context.Context) (*RoleBinding, error) {
	if err := rbuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rbuo.sqlSave, rbuo.mutation, rbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rbuo *RoleBindingUpdateOne) SaveX(ctx context.Context) *RoleBinding {
	node, err := rbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rbuo *RoleBindingUpdateOne) Exec(ctx context.Context) error {
	_, err := rbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbuo *RoleBindingUpdateOne) ExecX(ctx context.Context) {
	if err := rbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rbuo *RoleBindingUpdateOne) defaults() error {
	if _, ok := rbuo.mutation.UpdateTime(); !ok {
		if rolebinding.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized rolebinding.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := rolebinding.UpdateDefaultUpdateTime()
		rbuo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (rbuo *RoleBindingUpdateOne) sqlSave(ctx context.Context) (_node *RoleBinding, err error) {
	_spec := sqlgraph.NewUpdateSpec(rolebinding.Table, rolebinding.Columns, sqlgraph.NewFieldSpec(rolebinding.FieldID, field.TypeString))
	id, ok := rbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoleBinding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolebinding.FieldID)
		for _, f := range fields {
			if !rolebinding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolebinding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rbuo.mutation.DeleteTime(); ok {
		_spec.SetField(rolebinding.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := rbuo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(rolebinding.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := rbuo.mutation.UpdateTime(); ok {
		_spec.SetField(rolebinding.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := rbuo.mutation.Name(); ok {
		_spec.SetField(rolebinding.FieldName, field.TypeString, value)
	}
	if value, ok := rbuo.mutation.DisplayName(); ok {
		_spec.SetField(rolebinding.FieldDisplayName, field.TypeString, value)
	}
	if rbuo.mutation.DisplayNameCleared() {
		_spec.ClearField(rolebinding.FieldDisplayName, field.TypeString)
	}
	if value, ok := rbuo.mutation.RoleName(); ok {
		_spec.SetField(rolebinding.FieldRoleName, field.TypeString, value)
	}
	if value, ok := rbuo.mutation.UserID(); ok {
		_spec.SetField(rolebinding.FieldUserID, field.TypeString, value)
	}
	if value, ok := rbuo.mutation.DeletedTime(); ok {
		_spec.SetField(rolebinding.FieldDeletedTime, field.TypeInt64, value)
	}
	if value, ok := rbuo.mutation.AddedDeletedTime(); ok {
		_spec.AddField(rolebinding.FieldDeletedTime, field.TypeInt64, value)
	}
	if rbuo.mutation.DeletedTimeCleared() {
		_spec.ClearField(rolebinding.FieldDeletedTime, field.TypeInt64)
	}
	_node = &RoleBinding{config: rbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolebinding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rbuo.mutation.done = true
	return _node, nil
}
